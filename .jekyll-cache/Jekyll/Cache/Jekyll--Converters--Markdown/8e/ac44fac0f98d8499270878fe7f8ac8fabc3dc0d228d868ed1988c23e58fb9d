I"q.<p>In python everything is a object. Considering this</p>

<blockquote>
  <p>MetaClass is a class whose instances are classes.</p>
</blockquote>

<blockquote>
  <p>We can not create any instance using abstract class.</p>
</blockquote>

<blockquote>
  <p>Parent class is a classs we just use this have import all attibutes and functionalities.</p>
</blockquote>

<p>Did not get it why late, let us dive in</p>

<!--more-->

<h2 id="metaclass">MetaClass</h2>

<p>Considering my above statement let us see class of each object. Try this in python3</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="n">A</span><span class="p">.</span><span class="n">__class__</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">type</span><span class="s">'&gt;
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>So here class of a class is a <strong>type</strong>. Here type is a metaclass for all the classes in python. Now, we are going to create a meta class using this type as <strong>parent class</strong>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">MetaA</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">super</span><span class="p">().</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span>
        <span class="n">x</span><span class="p">.</span><span class="n">default_value</span> <span class="o">=</span> <span class="mi">100</span>
        <span class="k">return</span> <span class="n">x</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The above class is a metaclass whose instance will be a class. Using this metaclass let us create a class and see its argument</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">MetaA</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">A</span><span class="p">.</span><span class="n">default_value</span>
<span class="mi">100</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Try following for better understanding the above metaclasses</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="n">a</span><span class="o">=</span><span class="nb">type</span><span class="p">()</span>
<span class="n">a</span><span class="o">=</span><span class="n">MetaA</span><span class="p">()</span> <span class="c1"># This throws an error
</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">__new__</span><span class="p">()</span> <span class="n">missing</span> <span class="mi">3</span> <span class="n">required</span> <span class="n">positional</span> <span class="n">arguments</span><span class="p">:</span> <span class="s">'name'</span><span class="p">,</span> <span class="s">'bases'</span><span class="p">,</span> <span class="ow">and</span> <span class="s">'attrs'</span>

<span class="n">B</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">'B'</span><span class="p">,</span> <span class="p">(),</span> <span class="p">{})</span>
<span class="k">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">__main__</span><span class="p">.</span><span class="sa">B</span><span class="s">'&gt;

MetaB = MetaA('</span><span class="n">MetaB</span><span class="s">',(),{})
print (MetaB.default_value)
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>So here we can not directly creata a class from the metaclasses we use above shown format and the resultant will be a class.</p>

<blockquote>
  <p><strong>Metaclass is the class of classes</strong> whose defined variables and methods will be default class variables and class methods for all the classes derived from the metaclass</p>
</blockquote>

<h2 id="abstractclass">AbstractClass</h2>

<blockquote>
  <p>Abstract class is a blueprint for other classes. No instance can be created using the abstract class. But we can pass as parent class whose child class should have all the abstract methods defined in the abstract class.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABCMeta</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">BaseAbstract</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">ABCMeta</span><span class="p">):</span>

    <span class="o">@</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">testmethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Abstract Method"</span><span class="p">)</span>

<span class="n">a</span><span class="o">=</span><span class="n">BaseAbstract</span><span class="p">()</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
<span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">Cant</span> <span class="n">instantiate</span> <span class="n">abstract</span> <span class="k">class</span> <span class="nc">BaseAbstract</span> <span class="k">with</span> <span class="n">abstract</span> <span class="n">methods</span> <span class="n">test</span>

<span class="k">class</span> <span class="nc">Base</span><span class="p">(</span><span class="n">BaseAbstract</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">a</span><span class="o">=</span><span class="n">Base</span><span class="p">()</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">Cant</span> <span class="n">instantiate</span> <span class="n">abstract</span> <span class="k">class</span> <span class="nc">Base</span> <span class="k">with</span> <span class="n">abstract</span> <span class="n">methods</span> <span class="n">test</span>

<span class="k">class</span> <span class="nc">Base</span><span class="p">(</span><span class="n">BaseAbstract</span><span class="p">):</span>
     
     <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">"Hey Child"</span><span class="p">)</span>
 
<span class="n">b</span> <span class="o">=</span> <span class="n">Base</span><span class="p">()</span>
<span class="n">b</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">Hey</span> <span class="n">Child</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="parent-class">Parent Class</h2>

<p>This class attributes and methods will be passed to all child classes we need to define them again but we can modify them.</p>

<ul>
  <li>We can pass more than one parent class</li>
  <li>If two parent classes have same method preference comes from left.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">():</span>

    <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"this is A class"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">B</span><span class="p">():</span>

    <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">"This is B Class"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">c</span><span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">A</span> <span class="k">class</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET